// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: challenges.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChallenge = `-- name: CreateChallenge :one
INSERT INTO challenges (
    title,
    description,
    reward_amount,
    start_date,
    end_date,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, title, description, reward_amount, start_date, end_date, status, created_at, updated_at
`

type CreateChallengeParams struct {
	Title        string             `json:"title"`
	Description  pgtype.Text        `json:"description"`
	RewardAmount pgtype.Numeric     `json:"reward_amount"`
	StartDate    pgtype.Timestamptz `json:"start_date"`
	EndDate      pgtype.Timestamptz `json:"end_date"`
	Status       string             `json:"status"`
}

func (q *Queries) CreateChallenge(ctx context.Context, arg CreateChallengeParams) (Challenge, error) {
	row := q.db.QueryRow(ctx, createChallenge,
		arg.Title,
		arg.Description,
		arg.RewardAmount,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
	)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.RewardAmount,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChallengeByID = `-- name: GetChallengeByID :one
SELECT id, title, description, reward_amount, start_date, end_date, status, created_at, updated_at FROM challenges
WHERE id = $1
`

func (q *Queries) GetChallengeByID(ctx context.Context, id int32) (Challenge, error) {
	row := q.db.QueryRow(ctx, getChallengeByID, id)
	var i Challenge
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.RewardAmount,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserChallengeStatus = `-- name: GetUserChallengeStatus :one
SELECT id, user_id, challenge_id, status, created_at, updated_at FROM user_challenges
WHERE user_id = $1 AND challenge_id = $2
`

type GetUserChallengeStatusParams struct {
	UserID      int32 `json:"user_id"`
	ChallengeID int32 `json:"challenge_id"`
}

func (q *Queries) GetUserChallengeStatus(ctx context.Context, arg GetUserChallengeStatusParams) (UserChallenge, error) {
	row := q.db.QueryRow(ctx, getUserChallengeStatus, arg.UserID, arg.ChallengeID)
	var i UserChallenge
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChallengeID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const joinChallenge = `-- name: JoinChallenge :one
INSERT INTO user_challenges (
    user_id,
    challenge_id
) VALUES (
    $1, $2
) RETURNING id, user_id, challenge_id, status, created_at, updated_at
`

type JoinChallengeParams struct {
	UserID      int32 `json:"user_id"`
	ChallengeID int32 `json:"challenge_id"`
}

func (q *Queries) JoinChallenge(ctx context.Context, arg JoinChallengeParams) (UserChallenge, error) {
	row := q.db.QueryRow(ctx, joinChallenge, arg.UserID, arg.ChallengeID)
	var i UserChallenge
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChallengeID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveChallenges = `-- name: ListActiveChallenges :many
SELECT id, title, description, reward_amount, start_date, end_date, status, created_at, updated_at FROM challenges
WHERE status = 'active'
ORDER BY end_date ASC
`

func (q *Queries) ListActiveChallenges(ctx context.Context) ([]Challenge, error) {
	rows, err := q.db.Query(ctx, listActiveChallenges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Challenge{}
	for rows.Next() {
		var i Challenge
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.RewardAmount,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserChallengeStatus = `-- name: UpdateUserChallengeStatus :one
UPDATE user_challenges
SET 
    status = $3,
    updated_at = NOW()
WHERE user_id = $1 AND challenge_id = $2
RETURNING id, user_id, challenge_id, status, created_at, updated_at
`

type UpdateUserChallengeStatusParams struct {
	UserID      int32  `json:"user_id"`
	ChallengeID int32  `json:"challenge_id"`
	Status      string `json:"status"`
}

func (q *Queries) UpdateUserChallengeStatus(ctx context.Context, arg UpdateUserChallengeStatusParams) (UserChallenge, error) {
	row := q.db.QueryRow(ctx, updateUserChallengeStatus, arg.UserID, arg.ChallengeID, arg.Status)
	var i UserChallenge
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChallengeID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
