// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    goal_id,
    title,
    description,
    due_date
) VALUES (
    $1, $2, $3, $4
) RETURNING id, goal_id, title, description, status, due_date, created_at, updated_at
`

type CreateTaskParams struct {
	GoalID      int32              `json:"goal_id"`
	Title       string             `json:"title"`
	Description pgtype.Text        `json:"description"`
	DueDate     pgtype.Timestamptz `json:"due_date"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.GoalID,
		arg.Title,
		arg.Description,
		arg.DueDate,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.GoalID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, goal_id, title, description, status, due_date, created_at, updated_at FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.GoalID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasksByGoalID = `-- name: ListTasksByGoalID :many
SELECT id, goal_id, title, description, status, due_date, created_at, updated_at FROM tasks
WHERE goal_id = $1
ORDER BY due_date ASC NULLS LAST
`

func (q *Queries) ListTasksByGoalID(ctx context.Context, goalID int32) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasksByGoalID, goalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.GoalID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.DueDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskStatus = `-- name: UpdateTaskStatus :one
UPDATE tasks
SET 
    status = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, goal_id, title, description, status, due_date, created_at, updated_at
`

type UpdateTaskStatusParams struct {
	ID     int32  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskStatus, arg.ID, arg.Status)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.GoalID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
