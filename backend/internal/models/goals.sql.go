// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: goals.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGoal = `-- name: CreateGoal :one
INSERT INTO goals (
    user_id,
    title,
    description,
    target_amount,
    deadline
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, title, description, target_amount, current_amount, deadline, status, created_at, updated_at
`

type CreateGoalParams struct {
	UserID       int32              `json:"user_id"`
	Title        string             `json:"title"`
	Description  pgtype.Text        `json:"description"`
	TargetAmount pgtype.Numeric     `json:"target_amount"`
	Deadline     pgtype.Timestamptz `json:"deadline"`
}

func (q *Queries) CreateGoal(ctx context.Context, arg CreateGoalParams) (Goal, error) {
	row := q.db.QueryRow(ctx, createGoal,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.TargetAmount,
		arg.Deadline,
	)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.Deadline,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGoalByID = `-- name: GetGoalByID :one
SELECT id, user_id, title, description, target_amount, current_amount, deadline, status, created_at, updated_at FROM goals
WHERE id = $1
`

func (q *Queries) GetGoalByID(ctx context.Context, id int32) (Goal, error) {
	row := q.db.QueryRow(ctx, getGoalByID, id)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.Deadline,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listGoalsByUserID = `-- name: ListGoalsByUserID :many
SELECT id, user_id, title, description, target_amount, current_amount, deadline, status, created_at, updated_at FROM goals
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListGoalsByUserID(ctx context.Context, userID int32) ([]Goal, error) {
	rows, err := q.db.Query(ctx, listGoalsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Goal{}
	for rows.Next() {
		var i Goal
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.TargetAmount,
			&i.CurrentAmount,
			&i.Deadline,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGoalAmount = `-- name: UpdateGoalAmount :one
UPDATE goals
SET 
    current_amount = current_amount + $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, title, description, target_amount, current_amount, deadline, status, created_at, updated_at
`

type UpdateGoalAmountParams struct {
	ID            int32          `json:"id"`
	CurrentAmount pgtype.Numeric `json:"current_amount"`
}

func (q *Queries) UpdateGoalAmount(ctx context.Context, arg UpdateGoalAmountParams) (Goal, error) {
	row := q.db.QueryRow(ctx, updateGoalAmount, arg.ID, arg.CurrentAmount)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.Deadline,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateGoalStatus = `-- name: UpdateGoalStatus :one
UPDATE goals
SET 
    status = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, title, description, target_amount, current_amount, deadline, status, created_at, updated_at
`

type UpdateGoalStatusParams struct {
	ID     int32  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateGoalStatus(ctx context.Context, arg UpdateGoalStatusParams) (Goal, error) {
	row := q.db.QueryRow(ctx, updateGoalStatus, arg.ID, arg.Status)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.Deadline,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
