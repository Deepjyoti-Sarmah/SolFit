// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: funds.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFund = `-- name: CreateFund :one
INSERT INTO funds (
    user_id,
    goal_id,
    amount,
    transaction_hash,
    status
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, user_id, goal_id, amount, transaction_hash, status, created_at, updated_at
`

type CreateFundParams struct {
	UserID          int32          `json:"user_id"`
	GoalID          int32          `json:"goal_id"`
	Amount          pgtype.Numeric `json:"amount"`
	TransactionHash pgtype.Text    `json:"transaction_hash"`
	Status          string         `json:"status"`
}

func (q *Queries) CreateFund(ctx context.Context, arg CreateFundParams) (Fund, error) {
	row := q.db.QueryRow(ctx, createFund,
		arg.UserID,
		arg.GoalID,
		arg.Amount,
		arg.TransactionHash,
		arg.Status,
	)
	var i Fund
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GoalID,
		&i.Amount,
		&i.TransactionHash,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFundByID = `-- name: GetFundByID :one
SELECT id, user_id, goal_id, amount, transaction_hash, status, created_at, updated_at FROM funds
WHERE id = $1
`

func (q *Queries) GetFundByID(ctx context.Context, id int32) (Fund, error) {
	row := q.db.QueryRow(ctx, getFundByID, id)
	var i Fund
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GoalID,
		&i.Amount,
		&i.TransactionHash,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listFundsByGoalID = `-- name: ListFundsByGoalID :many
SELECT id, user_id, goal_id, amount, transaction_hash, status, created_at, updated_at FROM funds
WHERE goal_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListFundsByGoalID(ctx context.Context, goalID int32) ([]Fund, error) {
	rows, err := q.db.Query(ctx, listFundsByGoalID, goalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Fund{}
	for rows.Next() {
		var i Fund
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.GoalID,
			&i.Amount,
			&i.TransactionHash,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFundStatus = `-- name: UpdateFundStatus :one
UPDATE funds
SET 
    status = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, goal_id, amount, transaction_hash, status, created_at, updated_at
`

type UpdateFundStatusParams struct {
	ID     int32  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateFundStatus(ctx context.Context, arg UpdateFundStatusParams) (Fund, error) {
	row := q.db.QueryRow(ctx, updateFundStatus, arg.ID, arg.Status)
	var i Fund
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GoalID,
		&i.Amount,
		&i.TransactionHash,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
